setwd("C:/Users/pn211/Box/0MyBoxFolders/active Work/Rtglm/paper")
## load data
data(Flu1918)
data(Flu2009)
data(Measles1861)
data(SARS2003)
data(Smallpox1972)
data <- list(Measles1861 = Measles1861,
Flu1918 = Flu1918,
Smallpox1972 = Smallpox1972,
Flu2009 = Flu2009,
SARS2003 = SARS2003)
rm(list=ls())
library(Hmisc)
library(EpiEstim)
library(incidence)
library(projections)
library(ggplot2)
# remove.packages('Rtglm')
# devtools::install_github("pnouvellet/Rtglm",build = TRUE)
library(Rtglm)
## load data
data(Flu1918)
data(Flu2009)
data(Measles1861)
data(SARS2003)
data(Smallpox1972)
data <- list(Measles1861 = Measles1861,
Flu1918 = Flu1918,
Smallpox1972 = Smallpox1972,
Flu2009 = Flu2009,
SARS2003 = SARS2003)
rm(Measles1861 ,
Flu1918 ,
Smallpox1972 ,
Flu2009 ,
SARS2003 )
for (i in 1:length(data)){
if(i %in% c(1,2,3,5)){
data[[i]]$incidence <- data.frame(local = data[[i]]$incidence,
imported = 0)
data[[i]]$incidence$imported[1] <- data[[i]]$incidence$local[1]
data[[i]]$incidence$local[1] <- 0
}else{
data[[i]]$incidence <- data.frame(local = data[[i]]$incidence$I,
imported = 0)
data[[i]]$incidence$imported[1] <- data[[i]]$incidence$local[1]
data[[i]]$incidence$local[1] <- 0
}
}
## incidence:
for(i in 1:length(data)){
plot(rowSums(data[[i]]$incidence),main = names(data)[i])
}
# prior: exponential distribution with mean 1
mean_prior = 5
std_prior = 5
para_prior <- epitrix::gamma_mucv2shapescale(mu = mean_prior,cv = std_prior/mean_prior)
hist(rgamma(n = 1e3,shape = para_prior$shape, scale = para_prior$scale))
data[[k]]$incidence
k=1
data[[k]]$incidence
data[[k]]$incidence
aa=si_distr
aa=data[[k]]$incidence
View(aa)
rm(list=ls())
library(Hmisc)
library(EpiEstim)
library(incidence)
library(projections)
library(ggplot2)
remove.packages('Rtglm')
devtools::install_github("pnouvellet/Rtglm",build = TRUE)
library(Rtglm)
library(Rtglm)
devtools::install_github("pnouvellet/Rtglm",build = TRUE)
setwd("/Users/pnouvell/Library/CloudStorage/Box-Box/0MyBoxFolders/active Work")
setwd("/Users/pnouvell/Library/CloudStorage/Box-Box/0MyBoxFolders/active Work/Rtglm/paper")
rm(list=ls())
library(mvtnorm)
library(ggtext)
library(RColorBrewer)
rf <- colorRampPalette(rev(brewer.pal(8,'Spectral')))
r <- rf(32)
# open the shapefile
require(sf)
require(ggplot2)
library(tidyverse)
library(Hmisc)
library(EpiEstim)
library(incidence)
library(projections)
library(readxl)
# remove.packages('MCMCEpiEstim')
# devtools::install_github("pnouvellet/MCMCEpiEstim",build = TRUE)
library(MCMCEpiEstim)
# devtools::load_all('.')
# remove.packages('Rtglm')
# devtools::install_github("pnouvellet/Rtglm",build = TRUE)
library(Rtglm)
library(scoringutils)
r_2_R <- function(r){
R <- 1/sum(exp(-r*0:(length(si)-1))*si)
return(R)
}
# r_2_R(r = -0.5)
findRoot <- function(r,R){
R_check <- r_2_R(r)
return( (R_check - R)^2 )
}
# r <- optim(par = 0, fn = findRoot, method = 'BFGS', hessian=TRUE, R = 2 )$par
# serial interval for simulation
data("Flu1918")
data <- Flu1918
rm(Flu1918)
si <- data$si_distr
I0 <- 30
# incidence::as.incidence(x = rep(5,10), dates = 1:10, interval = 1)
# number of locations/simuated horizon
n_loc <- 1
t_sim <- 5
# number of simulation
n_sample_Rs <- 1e2 # number of distinct Rts
n_sample_within <- 1e2 # simulation with given Rts
n_post <- 1e3
uk <- st_read('Rdata/gadm41_GBR_shp/gadm41_GBR_2.shp')
ct <- sf::st_centroid(uk)
centroids <- ct$geometry
separated_coord <- ct %>%
mutate(long = unlist(map(ct$geometry,1)),
lat = unlist(map(ct$geometry,2)))
uk$cent.x <- separated_coord$long
uk$cent.y <- separated_coord$lat
limits_x1 <- seq(min(uk$cent.x),max(uk$cent.x),length.out = 3)
limits_y1 <- seq(min(uk$cent.y),max(uk$cent.y),length.out = 3)
uk$grid1 <- paste0(cut(uk$cent.x,limits_x1,include.lowest = TRUE),'-',
cut(uk$cent.y,limits_y1,include.lowest = TRUE))
limits_x <- seq(min(uk$cent.x),max(uk$cent.x),length.out = 5)
limits_y <- seq(min(uk$cent.y),max(uk$cent.y),length.out = 5)
uk$grid2 <- paste0(cut(uk$cent.x,limits_x,include.lowest = TRUE),'-',
cut(uk$cent.y,limits_y,include.lowest = TRUE))
set.seed(1)
Rt_min_max <- data.frame(max = 2,
min = 0.5)
#
# # spatial component of of force of infection
# var_range <- c(.5,2)
#
# Mus <- Sigmas <- list()
# for (i in 1:n_sample_Rs){
#   r_loc <- sample(x = 1:nrow(uk),size = 3,replace = TRUE)
#   Mus[[i]] <- list(c(uk$cent.x[r_loc[1]],uk$cent.y[r_loc[1]]),
#              c(uk$cent.x[r_loc[2]],uk$cent.y[r_loc[2]]),
#              c(uk$cent.x[r_loc[3]],uk$cent.y[r_loc[3]]))
#   Sigmas[[i]] <- runif(n = 3, min = var_range[1], max = var_range[2])
# }
# # sigma <- c(2,1,1) # variance of peaks
# # mu <- list(c(-1,51),
# #            c(-2,55),
# #            c(-7,54))
#
# R_true <- data.frame(GID_2 = uk$GID_2,
#                      cent.x = uk$cent.x, cent.y = uk$cent.y,
#                      matrix(NA, nrow = nrow(uk), ncol = n_sample_Rs))
# for(i in 1:n_sample_Rs){
#   if((i%%10) == 0) print(i)
#   R_true[,3+i] <- kernel_rt(map = uk,
#                           mu = Mus[[i]], sigma = Sigmas[[i]],
#                           Rt_min_max = Rt_min_max)
# }
# # check range and Rt>1
# print(paste0('range of Rt: ',
#              round(range(R_true[,3+1]), digits = 2) ))
# print(paste0('Proportion of Rt above 1: ',
#              round(sum(R_true[,3+1]>1)/nrow(uk), digits = 3)*100,'%' ))
#
# saveRDS(object = R_true, file = 'Rdata/R_true_sp.rds')
R_true <- readRDS(file = 'Rdata/R_true_sp.rds')
# I_sim <- list()
# ini_I <- list()
# k.Rt = k.within = 1
# for(k.Rt in 1:n_sample_Rs){
#   if((k.Rt%%10) == 0) print(k.Rt)
#
#   ini_I[[k.Rt]] <- I_sim[[k.Rt]] <- list()
#   # print(k.Rt)
#   # initialise incidence according to Rts
#   for (i in 1:nrow(uk)){   # do it for each locations
#     R <- R_true[i,3+k.Rt]
#     # simulate 10 previous days using growth rate (wallinga/lipsitch)
#     ini_r <- optim(par = 0, fn = findRoot,
#                    method = 'BFGS',
#                    hessian=TRUE, R = R )$par
#     init_t <- 10
#     temp <- exp(ini_r*1:init_t)
#     ini_I[[k.Rt]][[i]] <- incidence::as.incidence(x = round(temp/sum(temp)*I0),
#                                              dates = 1:init_t, interval = 1)
#   }
#   # plot(ini_I$counts)
#   for (k.within in 1:n_sample_within){
#     I_sim[[k.Rt]][[k.within]] <- list()
#     # k = k.within + ((k.Rt)-1)* n_sample_within
#     for (i in 1:nrow(uk)){
#       R <- R_true[i,3+k.Rt]
#       # simulate incidence
#       I <- as.data.frame(projections::project(x = ini_I[[k.Rt]][[i]],
#                                               R = R,
#                                               n_sim = 1, # keep at 1!
#                                               si = si[-1],
#                                               n_days = t_sim,
#                                               instantaneous_R = TRUE))
#
#
#       d_incidence <- data.frame(t = c(1:ini_I[[k.Rt]][[i]]$timespan,I[,1]),
#                                 incidence = c(ini_I[[k.Rt]][[i]]$counts,I[,2]))
#       # plot(d_incidence$t, d_incidence$incidence)
#       # specify importation (e.g. the initialisation)
#       I_corr <- data.frame(local = d_incidence$incidence,
#                            imported = 0)
#       # correct initial case as imported
#       I_corr$imported[1:init_t] <- d_incidence$incidence[1:init_t]
#       I_corr$local[1:init_t] <- 0
#
#
#       I_sim[[k.Rt]][[k.within]][[i]] <- I_corr
#     }
#
#   }
# }
#
# saveRDS(object = I_sim,file = 'Rdata/I_sim_sp.rds')
I_sim <- readRDS(file = 'Rdata/I_sim_sp.rds')
k.Rt =1
k.within =1
I_incid = I_sim[[k.Rt]][[k.within]]
View(I_incid)
View(I_incid)
uk$cent.x
x=uk$cent.x
View(R_true)
kernel_rt(map = uk,
mu = Mus[[i]], sigma = Sigmas[[i]],
Rt_min_max = Rt_min_max)
kernel_rt(map = uk,
mu = Mus[[i]], sigma = c(1,1,1),
Rt_min_max = Rt_min_max)
Mus=list(c(1,1))
Mus=list(c(1,1),c(2,2))
Mus=list(c(1,1),c(2,2),c(3,3))
kernel_rt(map = uk,
mu = Mus[[i]], sigma = c(1,1,1),
Rt_min_max = Rt_min_max)
kernel_rt(map = uk,
mu = Mus[[1]], sigma = c(1,1,1),
Rt_min_max = Rt_min_max)
map = uk
mu = Mus[[i]]
mu = Mus[[1]]
sigma = Sigmas[[i]]
sigma = Sigmas[[1]]
sigma = c(1,1,1)
# mu list of same size as sigma!
n_peak <- length(sigma)
# spatial component of  force of infection
mu_p <- mu[[1]]
d <- dmvnorm(x = cbind(map$cent.x,map$cent.y), mean = mu_p, sigma = sigma[1]*diag(2))
x = cbind(map$cent.x,map$cent.y)
mu
Mu
Mus
kernel_rt(map = uk,
mu = Mus, sigma = c(1,1,1),
Rt_min_max = Rt_min_max)
Rt_min_max
View(x)
Mus=list(c(1,50),c(2,51),c(3,49))
kernel_rt(map = uk,
mu = Mus, sigma = c(1,1,1),
Rt_min_max = Rt_min_max)
